<svg fill="none" width="100%" height="300" xmlns="http://www.w3.org/2000/svg">
    <foreignObject width="100%" height="100%">
        <div id="head">
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/typed.js/2.0.5/typed.min.js"></script>
            <style>
                @import url('https://fonts.googleapis.com/css2?family=Carter+One&family=Fira+Mono&display=swap');
                
                * {
                    margin: 0;
                    padding: 0;
                    box-sizing: border-box;
                    /* color: #fff; */
                }
        
                p, span {
                    font-family: 'Fira Mono';
                    font-size: 16px;
                    line-height: 20px;
                }

                #body {
                    /* background: #0D1117; #282c34 */
                    width: 100%;
                    height: 100%;
                    background-color: #000;
                }
        
                #background {
                    overflow: hidden;
                    position: relative;
                    height: 100%;
                    width: 100%;
                    filter: blur(2px);
                }
            
                #grid {
                    position: absolute;
                    bottom: 0;
                    right: 0;
                    background-color: #fff;
                    display: grid;
                    grid-auto-flow: row;
                    place-items: start;
                    width: 200%;
                    height: 200%;
                }
        
                .cell {
                    display: flex;
                    place-self: stretch;
                }
        
                .typed, .typed-cursor {
                    align-self: center;
                }
            
                .hidden {
                    display: none;
                }
            
                .var {
                    /*   color: #c678dd; Dark */
                    color: #a626a4;
                }
            
                .hex {
                    /*   color: #61afef; Dark */
                    color: #4078f2;
                }
            
                .num,
                .class {
                    /*   color: #d19a66; Dark */
                    color: #986801;
                }
            
                .eq {
                    /* color: #528BFF; Dark  */
                    color: #526EFF;
                }
            
                .prop,
                .tag,
                .element {
                    /*   color: #e06c75;  Dark*/
                    color: #e45649;
                }
            
                .string {
                    /*   color: #98c379; Dark*/
                    color: #50a14f;
                }
            </style>
        </div>
        <div id="body" xmlns="http://www.w3.org/1999/xhtml">
            <p>&lt<span class="tag">h1</span>&gt Hello World! &lt/<span class="tag">h1</span>&gt</p>
            <p>&lt<span class="tag">p</span>&gt This is a HTML, CSS, and JS animation. &lt/<span class="tag">p</span>&gt</p>
            <p>&lt<span class="tag">p</span>&gt Embedded in an SVG for your enjoyment! &lt/<span class="tag">p</span>&gt</p>
            <p>&lt<span class="tag">p</span>&gt Thanks for visiting :) &lt/<span class="tag">p</span>&gt</p>
            <p><span class="var">var</span> foo <span class="eq">=</span> <span class="string">"bar"</span>;</p>
            <p><span class="var">var</span> fooBar <span class="eq">=</span> <span class="string">"baz"</span>;</p>
            <p><span class="var">var</span> fooRay <span class="eq">=</span> [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</p>
            <p><span class="element">*</span> { margin: <span class="num">0</span>; }</p>
            <p><span class="element">*</span> { padding: <span class="num">0</span>; }</p>
            <p><span class="element">*</span> { background-color: <span class="num">#</span><span class="hex">000</span>; }</p>
        </div>
        <script>
            function randRange(min, max) {
                return Math.round(Math.random() * (max - min + 1) + min);
            }

            function getTextWidth(text, font) {
                var canvas = document.createElement("canvas");
                var context = canvas.getContext("2d");
                context.font = font;
                canvas.remove();
                return context.measureText(text).width;
            }

            function pseudoRandNum(x, min, max) {
                a = min + (max-min)/2;
                n = ((a * x) % (max + 1)) / (max + 1)
                return Math.round(n * (max - min + 1) + min);
            }

            const animationLength = 30;
            const minRowSpeed = 3;
            const maxRowSpeed = 2;
            const initRowPosX = 2;

            var textStrings = [];
            var htmlStrings = $("p").map(function () {
                var el = $(this);
                textStrings.push(el.text().trim());
                return el.html().trim();
            }).get();


            var style = Object.values($("p").css(["font-weight", "font-size", "font-family"])).join(" ").replace(/"/g, "");
            var longestStr = textStrings.reduce(function (a, b) {
                    return a.length > b.length ? a : b;
                }
            );

            const maxWidth = getTextWidth(longestStr, style);

            $("p").addClass("hidden");
            $("p").last().after("<div id='grid'></div>");
            $("#grid").wrap("<div id='background'></div>");

            let numCols = Math.floor($("#grid").css("width").replace(/\D/g, "") / maxWidth);
            let numRows = Math.floor($("#grid").css("height").replace(/\D/g, "") / ($("p").css("line-height").replace(/\D/g, "") * 3));

            let gridDim = ["1fr ".repeat(numRows), "1fr ".repeat(numCols)].join("/ ");
            $("#grid").css("grid", gridDim);

            const cellCount = numCols * numRows;

            var currRow = 0;
            for (i = 1; i <= cellCount; i++) {
                $("#grid").append("<div class='cell row-" + currRow + "'><span id='typed-" + i + "' class='typed'></span></div>");
                if (i % numCols === 0) {
                    currRow++;
                }
            }

            var gridAnimation = `
            @keyframes scroll {
                0% {
                    transform: translate(0, 0);
                }
                100% {
                    transform: translate(0, `+ $("#background").css("height") +`);
                }
            }`;
            
            $("<style>"+ gridAnimation + "</style>").appendTo("#head");
            $("#grid").css("animation", "scroll "+ animationLength +"s linear infinite");
            
            const backgroundWidth = $("#background").css("width").replace(/\D/g, "");
            for (i = 0; i < numRows; i++) {
                const min = Math.floor(backgroundWidth / minRowSpeed);
                const max = Math.floor(backgroundWidth * maxRowSpeed);
                var w = randRange(min, max);

                var cr = $(".row-" + i);
                cr.css("--w", w + "px");

                var rowAnimation = `
                @keyframes slide-r` + i + `{
                    0% {
                        transform: translate(0, 0);
                    }
                    100% {
                        transform: translate(var(--w), 0);
                    }
                }`;
                $("<style>" + rowAnimation + "</style>").appendTo("head");
                cr.css({
                    animation: "slide-r" + i + " " + animationLength + "s linear infinite",
                    transform: "translateX(" + randRange(-maxWidth / initRowPosX, maxWidth / initRowPosX) + "px)"
                });
                cr.on('animationiteration',
                    function () {
                        $(this).css("--w", pseudoRandNum($(this).css("--w").replace(/\D/g, ""), min, max) + "px");
                    });
            }

            var options = {
                strings: htmlStrings,
                typeSpeed: 70,
                smartBackspace: false,
                backDelay: 2000,
                loop: true,
                onStringTyped: function (pos, self) { 
                    self.typeSpeed = randRange(50, 80);
                    self.backDelay = randRange(700, 3000);
                    self.backSpeed = randRange(0, 30);
                    self.startDelay = 0; 
                },
            };

            var typedArr = Array(cellCount);
            for (i = 1; i <= cellCount; i++) {
                typedArr[i] = new Typed("#typed-"+i, options);
                htmlStrings.sort(() => Math.random() - 0.5);
                options.typeSpeed = randRange(50, 80);
                options.backDelay = randRange(700, 3000);
                options.backSpeed = randRange(0, 30);
                options.startDelay = randRange(500, 5000);
            }
        </script>
    </foreignObject>
    <style>
        text {
            font-family: 'Carter One';
            letter-spacing: 10px;
            stroke: #000;
            font-size: 150px;
            font-weight: 400;
            stroke-width: 3;
            
            animation: textAnimate 5s infinite alternate;
        }
        
        @keyframes textAnimate {
            0%, 40%{
                stroke-dasharray: 50% 0;
                stroke-dashoffstet: -20%;
                fill: rgb(255, 255, 255);

            }

            
            80%, 100% {
                stroke-dasharray: 0 50%;
                stroke-dashoffset:  20%;
                fill: rgb(65, 184, 131);
                
            }
        }
    </style>
    <text x="50%" y="50%" text-anchor="middle" dominant-baseline = "central">Welcome!</text>
</svg>
